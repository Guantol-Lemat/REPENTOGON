"558bec6aff68????????64a1????????5051535657a1????????33c5508d45??64a3????????8bda":
__fastcall GridEntity* CreateGridEntity(GridEntityType type, unsigned int seed);

"558bec8b45??568bf18946??8b06":
__thiscall void GridEntity::Init(unsigned int Seed);

"558bec83ec488a55":
__thiscall void GridEntity::hurt_func(Entity* ent, int Damage, int DamageFlags, float unk3, bool unk4);

"558bec83ec148bd1f30f115d":
__thiscall void GridEntity::hurt_surroundings(int Damage, unsigned long long DamageFlags, float unk3, bool unk4);

"558bec83ec088b41":
__thiscall Vector* GridEntity::GetRenderPosition(Vector* buffer);

"558bec8b41??8b0d":
__thiscall Vector* GridEntity::GetPosition(Vector* buffer);

"8b41??83f80274??83f80374??83f80474??83f80574??83f80674??83f81674??83f81874??83f81974??83f81a74??83f81b74??32c0":
__thiscall bool GridEntity::IsBreakableRock();

struct GridEntity depends (GridEntityDesc) {
{{
	inline GridEntityDesc* GetDesc() {return (GridEntityDesc*)((char*)this + 0x4); }
	inline int GetType() {return *(int*)((char*)this + 0x4); }
	inline GridCollisionClass* GetCollisionClass() { return (GridCollisionClass*)((char*)this + 0x3C); }
	inline unsigned int* GetGridIndex() { return (unsigned int*)((char*)this + 0x24); }
	
	template<typename T>
    inline T Downcast(void* target) {
        return (T)__RTDynamicCast(this, 0, (void*)__ptr_GridEntityRTTI, target, false); 
    }
	template<typename T>
	inline T FakeDowncast(unsigned int type) {
		return this->GetType() == type ? (T)static_cast<T>(this) : nullptr;
	}
	template<typename T>
	inline T FakeDowncast(unsigned int type1, unsigned int type2) {
		return (this->GetType() == type1 || this->GetType() == type2) ? (T)static_cast<T>(this) : nullptr;
	}

	inline GridEntity_Door* ToDoor() { return Downcast<GridEntity_Door*>(__ptr_GridEntityDoorRTTI); }
	inline GridEntity_Pit* ToPit() { return Downcast<GridEntity_Pit*>(__ptr_GridEntityPitRTTI); } 
	inline GridEntity_Poop* ToPoop() { return Downcast<GridEntity_Poop*>(__ptr_GridEntityPoopRTTI); } 
	inline GridEntity_Rock* ToRock() { return Downcast<GridEntity_Rock*>(__ptr_GridEntityRockRTTI); } 
	
	// TODO: the RTTIs on these have no viable signature currently
	inline GridEntity_Decoration* ToDecoration() { return FakeDowncast<GridEntity_Decoration*>(1); }
	inline GridEntity_Fire* ToFire() { return FakeDowncast<GridEntity_Fire*>(13); }
	inline GridEntity_Gravity* ToGravity() { return FakeDowncast<GridEntity_Gravity*>(19); }
	inline GridEntity_Lock* ToLock() { return FakeDowncast<GridEntity_Lock*>(11); }
	inline GridEntity_PressurePlate* ToPressurePlate() { return FakeDowncast<GridEntity_PressurePlate*>(20); }
	inline GridEntity_Spikes* ToSpikes() { return FakeDowncast<GridEntity_Spikes*>(8,9); }
	inline GridEntity_Stairs* ToStairs() { return FakeDowncast<GridEntity_Stairs*>(18); }
	inline GridEntity_Statue* ToStatue() { return FakeDowncast<GridEntity_Statue*>(21); }
	inline GridEntity_Teleporter* ToTeleporter() { return FakeDowncast<GridEntity_Teleporter*>(23); }
	inline GridEntity_TNT* ToTNT() { return FakeDowncast<GridEntity_TNT*>(12); }
	inline GridEntity_TrapDoor* ToTrapDoor() { return FakeDowncast<GridEntity_TrapDoor*>(17); }
	inline GridEntity_Wall* ToWall() { return FakeDowncast<GridEntity_Wall*>(15); }
	inline GridEntity_Web* ToWeb() { return FakeDowncast<GridEntity_Web*>(10); }
}} 
	
	GridEntityDesc _desc : 0x4;
	unsigned int _gridIdx : 0x24;
	unsigned int _spawnedFrame : 0x28;
	RNG _rng : 0x2c;
	unsigned int _collisionClass : 0x3c;
	ANM2 _anm2 : 0x40;
	
	__vtable {
		skip; // Free
		skip; // PostInit
		skip; // Update
		
        "558bec83e4f8a1????????8d5424??83ec3c8b80????????53568bf10f1080????????8b88????????0f1088????????57f30f7e90????????8d86????????3bc274??660fd650??0f11008948??0f1148??8d4424":
        void Render(Vector& Offset);
		
		skip; // Hurt
		
		"8b016a048b40":
		bool Destroy(bool Immediate);
		
		skip; // GetWaterClipInfo
		skip; // CanTakeDamageFromTearEffects
		skip; // BeginBatches
		skip; // EndBatches
		skip; // InitSubclass
    };
} : 0x154;

"74??6a0068(????????)68????????6a00ff75":
reference void* GridEntityRTTI;

/* For convenience's sake:
		skip; // Free
		skip; // PostInit
		skip; // Update
		skip; // Render
		skip; // Hurt
		skip; // Destroy
		skip; // GetWaterClipInfo
		skip; // CanTakeDamageFromTearEffects
		skip; // BeginBatches
		skip; // EndBatches
		skip; // InitSubclass
*/
