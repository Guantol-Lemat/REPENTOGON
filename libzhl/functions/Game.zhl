"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec105657a1????????33c5508d45??64a3????????8bf9897d":
__thiscall void Game::constructor();

"558bec6aff68????????64a1????????5083ec40a1????????33c58945??535657508d45??64a3????????c745??00000000":
__thiscall void Game::StartDebug(int levelStage,int stageType,int difficulty,std_string* unk); 

/*
FuncSignature Signature_GameIsPaused = {
	"\x83\xB9\x00\x00\x00\x00\x00\x8B\x15",
	//mask
	"xx?????xx",
*/

"83b9????????008b15":
__thiscall bool Game::IsPaused();

"a1????????8b80????????83f80174??83f80374??32c0":
static bool Game::IsHardMode();

"558bec83e4f883ec6c8b45":
__thiscall Entity* Game::Spawn(unsigned int type, unsigned int variant, const Vector& position, const Vector& velocity, Entity* spawner, unsigned int subtype, unsigned int seed, unsigned int unk);

"558beca1????????538b5d":
__thiscall void Game::ShakeScreen(int timeout);

"558bec83ec088b45??56":
__thiscall void Game::MakeShockwave(const Vector& pos, float amplitude, float speed, int duration);

"558bec5156578bf98b97":
__thiscall Entity_Player* Game::GetPlayer(int Index);

"8b81????????2b81????????c1f802c3":
__thiscall int Game::GetNumPlayers();

"558bec83e4f083ec38a1":
__thiscall void Game::Update();

"568bf180be????????008d8e":
__thiscall bool Game::AchievementUnlocksDisallowed();

"558bec83ec1c53568b75??578bf9":
__thiscall bool Game::PlaceRoom(LevelGenerator_Room *room, RoomConfig *data, unsigned int Seed, int dimension);

"558bec83e4f8515356578bf96aff":
__thiscall void Game::UpdateVisibility();

"558bec8b45??85c079":
__thiscall uint32_t* Game::GetRoomDescriptorsOffsetsArrayForDimension(uint32_t dimension);

"558bec6aff68????????64a1????????505657a1????????33c5508d45??64a3????????8bf164a1":
__thiscall RoomDescriptor* Game::GetRoomByIdx(uint32_t idx, int32_t dimension);

"558bec83ec1cf30f1005":
__thiscall float Game::GetPlanetariumChance();

"558bec83ec0c568bf18b0d":
__thiscall void Game::StartStageTransition(bool SameStage,int param_2,Entity_Player *param_3);

"558bec83e4f881ec1802":
__thiscall void Game::Render();

"558bec8b0d????????8b5508":
__thiscall void Game::ToggleDebugFlag(unsigned int flag);

"558bec8b5508b801000000568bf18bca83e11fc1ea05d3e085849664":
__thiscall bool Game::GetDebugFlag(unsigned int flag);

"558bec6aff68????????64a1????????5083ec78535657a1????????33c5508d45??64a3????????f30f1155":
__thiscall Entity* Game::SpawnBombCrater(Vector* Pos, float Scale<xmm2>);

"558bec83ec3ca1????????33c58945??538b1d":
static void Game::DevolveEnemy(Entity* ent);

"558bec6aff68????????64a1????????5081ecb8000000a1????????33c58945??535657508d45??64a3????????8b45":
__thiscall void Game::NetStart(void *unk, int challenge, Seeds seed, unsigned int difficulty, GameState *state);

"558bec515356578b3d????????b9":
static void Game::ProcessInput();

"558bec6aff68????????64a1????????5081eca4000000a1":
__thiscall void Game::Start(int playertype,int challenge,Seeds seeds,unsigned int difficulty);

"558bec51807d??000f28fb":
__thiscall void Game::SetColorModifier(ColorModState* color, bool lerp, float rate<xmm3>);

"83b9????????0076??8d81????????c3":
__thiscall ChallengeParam* Game::GetChallengeParams();

"a1????????33c98b90????????83fa038b80????????0f94c14083c109":
static bool Game::IsGreedBoss();

"a1????????33c98b90????????83fa038b80????????0f94c14083c10b":
static bool Game::IsGreedFinalBoss();

"8b81????????83f80274??83f80374??32c0c3":
__thiscall bool Game::IsGreedMode();

"558bec8b45??538b1d":
__thiscall void Game::End(int EndingID);

"c7818c311c0000000000c3ccccccccccc78190311c0000000000c3cccccccccca1????????8a8047362400c3":
__thiscall void Game::ClearDonationModGreed();

"ff81????????83b9????????03":
__thiscall void Game::AddDevilRoomDeal();

"558bec8b91????????83ec0c33c0":
__thiscall void Game::AddEncounteredBoss(unsigned int Boss, unsigned int Variant);

"558bec8b81????????8d55":
__thiscall void Game::AddPixelation(int Duration);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ec100100005657a1????????33c5508d45??64a3????????8bf9":
__thiscall void Game::BombDamage(Vector * Position, float Damage, float Radius, bool LineCheck, Entity* Source, BitSet128 TearFlags, unsigned int DamageFlagsL, unsigned int DamageFlagsH, bool DamageSource);

"558bec83e4f081ecd8000000a1":
__thiscall void Game::BombExplosionEffects(Vector* Position, float Damage, BitSet128 TearFlags, ColorMod* Color, Entity* Source, float RadiusMult, bool LineCheck, unsigned int DamageFlagsL, unsigned int DamageFlagsH, bool DamageSource);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505381ecb0000000a1????????33c58945??5657508d45??64a3????????894d":
__thiscall void Game::BombTearflagEffects(Vector* Position, float Radius, BitSet128 TearFlags, Entity* Source, float RadiusMult);

"558bec6aff68????????64a1????????5081ec80000000a1????????33c58945??535657508d45??64a3????????8bd98b0d":
__thiscall void Game::ButterBeanFart(Vector* Position, float Radius, Entity* Source, bool ShowEffect, bool DoSuperKnockback);

"558bec568bf15733ff":
__thiscall void Game::ChangeRoom(int RoomIndex, unsigned int Dimension);

"558bec6aff68????????64a1????????5083ec78a1????????33c58945??535657508d45??64a3????????8b0d":
__thiscall void Game::CharmFart(Vector* Position, float Radius, Entity* Source);

"558becf30f1045??8b45??f30f1181????????8981":
__thiscall void Game::Darken(float Darkness, int Timeout);

"558bec8bd180ba????????00":
__thiscall void Game::Fadein(float Speed);

"558becf30f1045??8b45??f30f1181????????f30f5881":
__thiscall void Game::Fadeout(float Speed, unsigned int FadeoutTarget);

"558bec6aff68????????64a1????????5083ec3c535657a1????????33c5508d45??64a3????????8bf18b0d":
__thiscall void Game::Fart(Vector* Position, float Radius, Entity* Source, float FartScale, int FartSubType, ColorMod* FartColor);

"5356578bf90f57c00f2f87":
__thiscall void Game::FinishChallenge();

"a1????????8b80????????83f80174??83f80374??33c0c3":
__thiscall unsigned int Game::GetDifficulty();

"33c083b9????????030f94c083c009":
__thiscall unsigned int Game::GetGreedBossWaveNum();

"33c083b9????????030f94c083c00b":
__thiscall unsigned int Game::GetGreedWavesNum();

"558bec83e4f883ec0c538bd956578bb3":
__thiscall Entity_Player* Game::GetNearestPlayer(Vector* Pos);

"8b81????????2b81????????c1f803":
__thiscall unsigned int Game::GetNumEncounteredBosses();

"558bec83e4f883ec1453568d81":
__thiscall Entity_Player* Game::GetRandomPlayer(Vector * Pos, float Radius);

"558bec568b75??33d25733ff":
__thiscall bool Game::GetStateFlag(unsigned int GameStateFlag);

"558bec8b91????????33c0":
__thiscall bool Game::HasEncounteredBoss(int Boss, int Variant);

"558bec83e4f851a1????????566aff":
__thiscall void Game::MoveToRandomRoom(bool IAmErrorRoom, int Seed, Entity_Player* Player);

"558bec6aff68????????64a1????????5083ec54a1????????33c58945??535657508d45??64a3????????8bf98b35":
__thiscall void Game::NextVictoryLap();

"538bdc83ec0883e4f883c404558b6b??896c24??8bec6aff68????????64a1????????505383ec405657a1????????33c5508d45??64a3????????894d??8b73":
__thiscall bool Game::RerollEnemy(Entity* e, bool unk);

"558bec83ec108bc15633f6":
__thiscall void Game::RerollLevelCollectibles();

"558bec83ec488bc1":
__thiscall void Game::RerollLevelPickups(unsigned int Seed);

"558bec8b45??83f831":
__thiscall void Game::SetStateFlag(unsigned int Flag, bool Value);

"558bec6aff68????????64a1????????5083ec48a1????????33c58945??535657508d45??64a3????????894d":
static void Game::ShowFortuneRandom(char* key);

"558bec83e4f883ec0c8b45??53568b35":
__thiscall void Game::ShowHallucination(int FrameCount, unsigned int BackdropId); 

"558bec5657e8":
__thiscall Entity_NPC* Game::SpawnEntityDesc(EntityDesc* Desc, Vector* Position, Entity* Spawner);

"558bec83e4f883ec0c5356578b7d??8bd9":
__thiscall void Game::SpawnParticles(Vector* Pos, unsigned int ParticleType, unsigned int NumParticles, float Speed, ColorMod * Color, float Height, int SubType);

"558bec83e4f883ec5453568b75??8bd1":
__thiscall void Game::StartRoomTransition(int RoomIdx, int Direction, unsigned int Animation, Entity_Player* Player, int Dimension);

"558becf30f105d??f30f1055":
__thiscall void Game::UpdateStrangeAttractor(Vector* Position, float Force, float Radius);

"e8????????c745fcffffffffa3(????????)e8":
reference Game *g_Game;

struct Game depends (Level, RoomDescriptor, RoomConfigHolder, PlayerManager, Console, ItemOverlay, Ambush, ProceduralItemManager, RoomTransition, GameState, Seeds, DebugRenderer, ScoreSheet, ColorModState, GameOver, ItemPool, Leaderboard, GenericPrompt, Font, HUD, Vector) { {{
	Game()
	{
		this->constructor();
	}
    
    uint32_t GetNbRooms() const 
    { 
        return *(uint32_t*)((char*)this + 0x1815C); 
    }
    
	inline Console* GetConsole() { return (Console*)((char*)this + 0x1BB60); } // Cast to appropriate type
	
	inline ItemOverlay* GetItemOverlay() { return (ItemOverlay*)((char*)this + 0x1BCC0) ; }
	
	inline Ambush* GetAmbush() { return (Ambush*)((char*)this + 0x1c31b8); }
	
	inline Room** GetCurrentRoom() { return (Room**)((char*)this + 0x18190); }
		
	inline int GetCurrentRoomIdx() {return *(int*)((char*)this + 0x18194); }

    inline int GetDimension() {return *(int*)((char*)this + 0x1819C);}
	
	inline int GetLastBossRoomListIdx() {return *(int*)((char*)this + 0x181A4); }
	
	inline int GetGreedModeWave() { return *(int*)((char*)this + 0x181C4); }
	
	inline const unsigned int* GetLevelStateFlags() { return (const unsigned int*)((char*)this + 0x1822C); }
		
	inline RoomConfigHolder* GetRoomConfigHolder() { return (RoomConfigHolder*)((char*)this + 0x1879C); }
	
	inline RoomConfig* GetRoomConfig() { return (RoomConfig*)((char*)this + 0x1879C); }
	
	inline PlayerManager* GetPlayerManager() { return (PlayerManager*)((char*)this + 0x1BA40); }
	
	inline int IsPauseMenuOpen() { return (bool)*(int*)((char*)this + 0x10203C); } //in reality this gets the pause menu itself, but the first att is if its opened or not
	
	inline PauseScreen* GetPauseMenu() { return (PauseScreen*)((char*)this + 0x10203C); } 
	
	inline DailyChallenge GetDailyChallenge() { return *(DailyChallenge*)((char*)this + 0x1C3204); }
	
	inline unsigned int GetChallenge() { return *(unsigned int*)((char*)this + 0x1C319C); }
	
	inline bool* IsDebug() { return &this->_isDebug; }
	
	inline unsigned int* GetDebugFlags() { return (unsigned int*)((char*)this + 0X1C3164); }
	
	inline ScoreSheet* GetScoreSheet() { return (ScoreSheet*)((char*)this + 0x1c32b8); }
	
	inline ProceduralItemManager* GetProceduralItemManager() {return (ProceduralItemManager*)((char*) this + 0x283c20); }

	inline PlayerHUD* GetPlayerHUD(uint32_t playerId) { return (PlayerHUD*)((char*)this + 0x3DA4C + playerId * 0x6B0); }
	
	inline Minimap* GetMinimap() { return (Minimap*)((char*)this + 0x1a2ab0); }
	
	inline RoomTransition* GetRoomTransition() { return (RoomTransition*)((char*)this + 0x1b6c0); }

    inline StageTransition* GetStageTransition() { return (StageTransition*)((char*)this + 0x1ba0c); }
	
	inline DebugRenderer* GetDebugRenderer() { return (DebugRenderer*)((char*)this + 0x283bf8); }
	
	inline GenericPrompt* GetGenericPrompt() { return (GenericPrompt*)((char*)this + 0x1c33fc); }

	inline GameOver* GetGameOver() { return (GameOver*)((char*)this + 0x1d154); }
	
	// this is part of ScoreSheet, shh
	inline int* GetVictoryLap() { return (int*)((char*)this + 0x1c33f8); }
	
	// Wack
	inline ColorModState* GetCurrentColorModifier() { return (ColorModState*)((char*)this + 0x283b84); }
	inline ColorModState* GetTargetColorModifier() { return (ColorModState*)((char*)this + 0x283b9c); }
	inline ColorModState* GetLerpColorModifier() { return (ColorModState*)((char*)this + 0x283bb4); }
	
    RoomDescriptor* GetRoomDescriptorsForDimension(uint32_t dimension) 
    { 
        return (RoomDescriptor*)((char*)this + 0x14 + dimension * sizeof(RoomDescriptor) * 169); 
    }

    bool LIBZHL_API IsErased(int type, int variant, int subtype);
}} 
	//Level _level : 0x0;
    uint32_t _stage : 0x0; // 0x0
    uint32_t _stageType : 0x4; // 0x4
    bool _bossChallenge : 0x8; //0x8
    bool _devilRoomDisabled : 0x9; //0x9
    uint32_t _curses : 0xC; // 0xC
    RoomDescriptor _gridRooms[507] : 0x14; // 0x14
    RoomDescriptor _negativeGridRooms[18] : 0x16c7c; // 0x16c7c
    uint32_t _roomOffset[507] : 0x1796c; // 0x1796c
    uint32_t _nbRooms : 0x1815c; // 0x1815C
    uint32_t _startingRoomIdx : 0x18160; // 0x18160
    Room* _room : 0x18190; // 0x18190
    uint32_t _currentRoomIdx : 0x18194; // 0x18194;
    uint32_t _lastRoomIdx : 0x18198; // 0x18198
    uint32_t _currentDimensionIdx : 0x1819c; // 0x1819C
    uint32_t _lastRoomDimensionIdx : 0x181a0; // 0x181A0
    uint32_t _lastBossRoomListIdx : 0x181a4; //0X181A4
    uint32_t _leaveDoor : 0x181a8; // 0x181A8
    uint32_t _enterDoor : 0x181ac; // 0x181AC
    uint32_t _greedModeWave : 0x181c4; // 0x181C4
    unsigned int _stateFlags : 0x1822c; // 0x1822C
    uint32_t _greedModeTreasureRoomIdx : 0x18200; // 0x18200
    RoomConfigHolder _roomConfigs : 0x1879c; // 0x1879C
	ItemPool _itemPool : 0x1A5CC;
	Seeds _seedEffects : 0x1bb04;
    PlayerManager _playerManager : 0x1BA40; // 0x1BA40 
    Console _console : 0x1bb60; // 0x1BB60
    ItemOverlay _itemOverlay : 0x1bcc0; // 0x1BCC0
	Leaderboard _leaderboard : 0x3d5f0; // 0x3d5f0
	HUD _hud : 0x3da4c;
	int _frameCount : 0x1a30dc; // 0x1a30dc
	int _timeCounter : 0x1a30e0; // 0x1a30dc
	int _bossRushParTime : 0x1a30e4;
	int _blueWombParTime : 0x1a30e8;
	int _screenShakeCountdown : 0x1a30ec; // 0x1a30ec
	Vector _screenShakeOffset : 0x1a30f0; // 0x1a30f0
	int _darknessTimeout : 0x1a30f8;
	float _darknessModifier : 0x1a30fc;
	float _targetDarkness : 0x1a3100;
	Font _font_Droid : 0x1a3104;
	bool  _triggerWindowResize : 0x1c3154;
	int _hallucinationTimeout : 0x1c3158;
	unsigned int _gameStateFlagsL : 0x1c3168;
	unsigned int _gameStateFlagsH : 0x1c316c;
    int _lastDevilRoomStage : 0x1c3174; // 0x1C3174
    int _treasureRoomsVisited : 0x1c3178; // 0x1C3178
    int _planetariumsVisited : 0x1c317c; // 0x1C317C
	int _stagesWithoutHeartsPicked : 0x1c3180;
	int _stagesWithoutDamage : 0x1c3184;
	int _devilRoomDeals : 0x1c3188;
	int _donationModGreed : 0x1c318c;
	int _donationModAngel : 0x1c3190;
	int _challenge : 0x1c319c;
	bool _isRerun : 0x1c31a0;
	bool _isDebug : 0x1c31a1;
    Ambush _ambush : 0x1c31b8; // 0x1c31b8
	ScoreSheet _scoreSheet : 0x1c32b8;
	int _lastLevelWithoutHalfHp : 0x24361c; // 0x24361C
	uint32_t _difficulty : 0x243624; // 0x243624
	int _lastLevelWithDamage : 0x243628; // 0x243628
	bool _shouldLerpColorModState : 0x283b80; // 0x283b80
	float _lightningIntensity : 0x283c00;
	vector_ErasedEntities _erasedEntities : 0x283c14; 
    ProceduralItemManager _proceduralItemManager : 0x283c20; // 0x283c20 
	
	
} : 0x285238;
