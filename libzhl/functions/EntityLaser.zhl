"558bec83e4f883ec2ca1????????33c4894424??5356578bf9837f??02":
__thiscall void Entity_Laser::ResetSpriteScale();

"558bec83ec58a1????????33c58945??538bd9":
__thiscall void Entity_Laser::DoDamage(Entity* entity, float damage<xmm2>);

"558bec515356578b7d??894d??8b77":
__thiscall bool Entity_Laser::CanDamageEntity(Entity* entity);

"538bdc83ec0883e4f883c404558b6b??896c24??8bec5156":
__thiscall void Entity_Laser::RotateToAngle(float angle, float speed);

"558bec83e4f883ec408b45":
static __stdcall Vector* Entity_Laser::CalculateEndPosition(Vector* buffer, Vector* Start, Vector* Dir, Vector* PositionOffset, Entity* Parent, float Margin);

"558bec807d??00f30f1045":
__thiscall void Entity_Laser::SetActiveRotation(int Delay, float AngleDegrees, float RotationSpd, bool TimeoutComplete);

"558bec83e4f851535657e8":
static __stdcall Entity_Laser* Entity_Laser::ShootAngle(unsigned int Variant, Vector* SourcePos, float AngleDegrees, int Timeout, Vector* PosOffset, Entity* Source, bool unk_Force);

struct Entity_Laser depends (BitSet128, Vector, HomingLaser) : public Entity {
{{
	inline float* GetScale() { return (float*)((char*)this + 0x430); }
	
	inline bool* GetOneHit() { return (bool*)((char*)this + 0x465); }
	inline std_vector_uint* GetHitList() { return (std_vector_uint*)((char*)this + 0x470); }

	
}}
	__vtable {
		skip; // Free
		skip; // Init
		skip; // PreUpdate
		skip; // Update
		skip; // Interpolate
		skip; // Render
		skip; // RenderShadowLayer
		skip; // PostRender
		skip; // TakeDamage
		skip; // Kill
		skip; // Remove
		skip; // TriggerGlowingHourglass
		
		//override
		"558BEC51F30F1081????????83EC08F30F5881????????F30F5905????????F30F5805????????F30F5805????????F30F1145??D945??DD1C24E8????????D95D??D945??83C408D95D??F30F1045??F30F5F05????????E8????????8BE55DC3??????????????????????????????8B91":
		float GetRenderZ();
		
		skip; // CanOverwrite
		skip; // SetColor
		skip; // SetCollisionDamage
		skip; // ClearReferences
		skip; // CanShutDoors
		skip; // IsBoss
		skip; // IsValidTarget
		skip; // TryThrow
		skip; // GetForwardVector
		skip; // HandleCollision
		skip; // ResetColor
		skip; // LoadEntityConfig
	};
	
	Vector _parentOffset : 0x360;
	float _startAngleDegrees: 0x368;
	float _angleDegrees : 0x36c;
	float _lastAngleDegrees : 0x370;
	BitSet128 _tearFlags : 0x378;
	int _timeout : 0x3a8;
	bool _firstUpdate : 0x3ac;
	bool _sampleLaser : 0x3ad;
	bool _shrink : 0x3ae;
	float _laserLength : 0x3b0;
	HomingLaser _homingLaser : 0x3b4;
	float _curveStrength : 0x408;
	float _radius : 0x40c;
	bool _isActiveRotating : 0x410;
	int _rotationDelay : 0x414;
	float _rotationDegrees : 0x418;
	float _rotationSpeed : 0x41c;
	float _maxDistance : 0x420;
	unsigned int _homingType: 0x424;
	Vector _endPoint : 0x428;
	float _scale : 0x430;
	bool _disableFollowParent : 0x434;
	Entity* _bounceLaser : 0x438;
	float _blackHpDropChance : 0x444;
	bool _multidimensionalTouched : 0x450;
	bool _oneHit : 0x465;
	bool _gridHit : 0x466;
} : 0x4b8;

"8b7d??6a0068(????????)68????????6a0050":
reference void* EntityLaserRTTI;